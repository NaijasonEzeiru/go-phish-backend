// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"
	"encoding/json"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
        username,
        password_hash
    )
VALUES ($1, $2)
RETURNING id, created_at, updated_at, username, password_hash
`

type CreateUserParams struct {
	Username     string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.PasswordHash,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT users.id, users.created_at, users.updated_at, users.username, users.password_hash,
    coalesce(
        json_agg(victims) filter (
            where victims is not null
        ),
        '[]'::json
    )::json victims
from users
    Left JOIN victims ON users.id = victims.user_id
where users.username = $1
GROUP BY users.id
`

type GetUserByUsernameRow struct {
	ID           int32
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Username     string
	PasswordHash string
	Victims      json.RawMessage
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.PasswordHash,
		&i.Victims,
	)
	return i, err
}
